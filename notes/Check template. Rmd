---
output:
  html_document:
    theme: sandstone
params: 
    set_title: !r paste("Kontroll av PJS-data for:", purpose, aar)
title: "`r params$set_title`"
---
```{r set-options, echo=FALSE, cache=FALSE}
options(width = 1000)
```

```{r setup, include=FALSE}

    # set_title: "My Title!"

# "Kontroll av PJS-data for OK-programmer"
# title: Kontroll av PJS-data for: `r purpose` `r aar`
# author: "Seksjon for epidemiologi, Veterinærinstituttet"
#Load packages
library(dplyr)
library(tidyr)
# library(openxlsx)
# require("stringr")
library(knitr)
library(kableExtra)
# library(ggplot2)
# library(tidyr)
# library(gtools)
library(NVIdb)

# Global variables
#For use in filenames
today <- format(Sys.Date(), "%Y%m%d")
# domene <- sub("Rscripts","",dirname(rstudioapi::getSourceEditorContext()$path))

knitr::opts_chunk$set(echo=TRUE)
```


```{r, include = FALSE}
# Import support data
# Translation table for PJS-codes
PJS_codes_2_text <- NVIdb::read_PJS_codes_2_text()

## Kontroll av PJS-data for: `r purpose` `r aar`   

```


### Resultat av kontroll av samsvar mellom konklusjoner og resultat per `r format(Sys.Date(), "%d.%m.%Y")`   
```{r, echo = F}
# SAKER SOM IKKE ER AVSLUTTET

heading <- paste("<br/> <br/>",   # &nbsp may be more general than <br/>
                 "<h4> Tabell 1. Saker fra",
                 aar,
                 "som ikke er avsluttet i PJS </h4>",
                 "<h5> Ber om at sakene avsluttes eller at saker som ikke er reelle, fjernes fra PJS. </h5>")

# Identify cases that need to be checked
ktr <- PJSdata %>%
  dplyr::select(saksnr, aar, ansvarlig_seksjon, innsendelsenr, fagansvarlig_person, mottatt, avsluttet) %>%
  dplyr::filter(is.na(avsluttet)) %>%
  dplyr::distinct() %>%
  dplyr::arrange(aar, ansvarlig_seksjon, innsendelsenr) %>%
  dplyr::select(-c(aar, ansvarlig_seksjon, innsendelsenr))  

# Remove heading if no data to report
if (dim(ktr)[1] == 0) {
  heading <- ""
}
knitr::asis_output(heading) # placed here as kitr::asis_output cannot be within a for-loop or an if-clause

# Output ktr if any cases need to be checked
if (dim(ktr)[1] > 0) {
  colnames(ktr) <- NVIdb::standardize_columns(ktr, property = "collabels")
  
  knitr::kable(ktr) %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
}
```

```{r, echo = F}
# Saker med mer enn én sakskonklusjon for identiske saksanalytter 

heading <- paste("<br/> <br/>",
                 "<h4> Tabell 2. Saker med mer enn én sakskonklusjon for identiske saksanalytter og der sakskonkklusjonene er motstridende </h4>",
                 "<h5> En sak kan ikke konkluderes med motstridende sakskonklusjoner for samme saksanalytt. Ber om at de sakskonklusjonene som er feil, fjernes fra saken. </h5>")

# Identify cases that need to be checked
ktr <- PJSdata %>%
  dplyr::select(saksnr, aar, ansvarlig_seksjon, innsendelsenr, fagansvarlig_person, sakskonkl_kjennelsekode, sakskonkl_analyttkode) %>%
  dplyr::distinct() %>%
  dplyr::add_count(saksnr, sakskonkl_analyttkode) %>%
  dplyr::filter(n > 1) %>%
  dplyr::arrange(aar, ansvarlig_seksjon, innsendelsenr) %>%
  dplyr::select(-c(aar, ansvarlig_seksjon, innsendelsenr, n)) %>%
  NVIdb::add_PJS_code_description(PJS_variable_type = c("kjennelse", "analytt"),
                                  code_colname = c("sakskonkl_kjennelsekode", "sakskonkl_analyttkode"),
                                  new_column = c("sakskonkl_kjennelse", "sakskonkl_analytt")) 

# Remove heading if no data to report
if (dim(ktr)[1] == 0) {
  heading <- ""
}
knitr::asis_output(heading) # placed here as kitr::asis_output cannot be within a for-loop or an if-clause

# Output ktr if any cases need to be checked
if (dim(ktr)[1] > 0) {
  colnames(ktr) <- NVIdb::standardize_columns(ktr, property = "collabels")
  
  print(knitr::kable(ktr)) %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
}
```

```{r, echo = F}
# Saker med sakskonklusjon som ikke er benyttet som prøvekonklusjon på noen av prøvene

heading <- paste("<br/> <br/>",
                 "<h4> Tabell 3. Saker med sakskonklusjon som ikke er benyttet som prøvekonklusjon på noen av prøvene </h4>",
                 "<h5> Ber om at det sjekkes at sakskonklusjonen er korrekt. </h5>")

# Identify cases that need to be checked
prvkonkl <- unique(paste(PJSdata$saksnr, PJSdata$konkl_kjennelsekode, PJSdata$konkl_analyttkode, sep = "-"))
ktr <- PJSdata %>%
  dplyr::select(saksnr, aar, ansvarlig_seksjon, innsendelsenr, fagansvarlig_person, 
                sakskonkl_kjennelsekode, sakskonkl_analyttkode) %>%
  dplyr::filter(!is.na(sakskonkl_analyttkode) & !is.na(sakskonkl_kjennelsekode)) %>%
  dplyr::distinct() %>%
  dplyr::mutate(index = paste(saksnr, sakskonkl_kjennelsekode, sakskonkl_analyttkode, sep = "-")) %>%
  dplyr::filter(!index %in% prvkonkl) %>%
  dplyr::arrange(aar, ansvarlig_seksjon, innsendelsenr) %>%
  dplyr::select(-c(aar, ansvarlig_seksjon, innsendelsenr, index))  %>%
  NVIdb::add_PJS_code_description(PJS_variable_type = c("kjennelse", "analytt"),
                                  code_colname = c("sakskonkl_kjennelsekode", "sakskonkl_analyttkode"),
                                  new_column = c("sakskonkl_kjennelse", "sakskonkl_analytt")) 

# Remove heading if no data to report
if (dim(ktr)[1] == 0) {
  heading <- ""
}
knitr::asis_output(heading) # placed here as kitr::asis_output cannot be within a for-loop or an if-clause

# Output ktr if any cases need to be checked
if (dim(ktr)[1] > 0) {
  colnames(ktr) <- NVIdb::standardize_columns(ktr, property = "collabels")
  
  knitr::kable(ktr) %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
}
```

```{r, echo = F}
# Saker med minst én prøve som har positiv konklusjon for SI H1N1 California, men som mangler dette som sakskonklusjon

heading <- paste("<br/> <br/>",
                 "<h4> Tabell 4. Saker med minst én prøve som har positiv konklusjon for SI H1N1 California, men som mangler dette som sakskonklusjon </h4>",
                 "<h5> Ber om at det sjekkes om det også skal legges inn som sakskonklusjonen, eller om prøvekonklusjonen kan være feil. </h5>")

# Identify cases that need to be checked
sakpos <- PJSdata %>%
  dplyr::select(saksnr, sakskonkl_kjennelsekode, sakskonkl_analyttkode) %>%
  dplyr::filter(sakskonkl_kjennelsekode == "020209" & sakskonkl_analyttkode == "01150101070103") %>%
  dplyr::distinct() %>%
  dplyr::mutate(index = paste(saksnr, sakskonkl_kjennelsekode, sakskonkl_analyttkode, sep = "-"))

ktr <- PJSdata %>%
  dplyr::select(saksnr, aar, ansvarlig_seksjon, innsendelsenr, provenr, konkl_kjennelsekode, konkl_analyttkode) %>%
  dplyr::filter(konkl_kjennelsekode == "020209" & konkl_analyttkode == "01150101070103") %>%
  dplyr::distinct() %>%
  dplyr::filter(!saksnr %in% sakpos$saksnr) %>%
  dplyr::arrange(aar, ansvarlig_seksjon, innsendelsenr, provenr) %>%
  dplyr::select(-c(aar, ansvarlig_seksjon, innsendelsenr)) %>%
  dplyr::distinct() %>%
  tidyr::pivot_wider(id_cols = c(saksnr, konkl_kjennelsekode, konkl_analyttkode),
                     names_from = provenr,
                     values_from = provenr,
                     names_prefix = "P") %>%
  dplyr::rowwise() %>%
  dplyr::mutate(provenr = toString(c_across(starts_with("P")))) %>%
  dplyr::mutate(provenr = gsub("NA, ", "", provenr)) %>%
  dplyr::mutate(provenr = trimws(provenr, "b", "[ ,NA]")) %>%
  dplyr::select(saksnr, provenr, konkl_kjennelsekode, konkl_analyttkode) %>%
  NVIdb::add_PJS_code_description(PJS_variable_type = c("kjennelse", "analytt"),
                                  code_colname = c("konkl_kjennelsekode", "konkl_analyttkode"),
                                  new_column = c("konkl_kjennelse", "konkl_analytt")) 

# Remove heading if no data to report
if (dim(ktr)[1] == 0) {
  heading <- ""
}
knitr::asis_output(heading) # placed here as kitr::asis_output cannot be within a for-loop or an if-clause

# Output ktr if any cases need to be checked
if (dim(ktr)[1] > 0) {
  colnames(ktr) <- NVIdb::standardize_columns(ktr, property = "collabels")
  
  knitr::kable(ktr) %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
}
```

```{r, echo = F}
# Saker med minst én prøve som har positiv konklusjon for PRCV, men som mangler dette som sakskonklusjon

heading <- paste("<br/> <br/>",
                 "<h4> Tabell 5. Saker med minst én prøve som har positiv konklusjon for PRCV, men som mangler dette som sakskonklusjon </h4>",
                 "<h5> Ber om at det sjekkes om det også skal legges inn som sakskonklusjonen, eller om prøvekonklusjonen kan være feil. </h5>")

# Identify cases that need to be checked
sakpos <- PJSdata %>%
  dplyr::select(saksnr, sakskonkl_kjennelsekode, sakskonkl_analyttkode) %>%
  dplyr::filter(sakskonkl_kjennelsekode == "020209" & sakskonkl_analyttkode == "01190108") %>%
  dplyr::distinct() %>%
  dplyr::mutate(index = paste(saksnr, sakskonkl_kjennelsekode, sakskonkl_analyttkode, sep = "-"))


ktr <- PJSdata %>%
  dplyr::select(saksnr, aar, ansvarlig_seksjon, innsendelsenr, provenr, 
                konkl_kjennelsekode, konkl_analyttkode) %>%
  dplyr::filter(konkl_kjennelsekode == "020209" & konkl_analyttkode == "01190108") %>%
  dplyr::distinct() %>%
  # dplyr::mutate(index = paste(saksnr, konkl_kjennelsekode, konkl_analyttkode, sep = "-")) %>%
  dplyr::filter(!saksnr %in% sakpos$saksnr) %>%
  dplyr::arrange(aar, ansvarlig_seksjon, innsendelsenr, provenr) %>%
  dplyr::select(-c(aar, ansvarlig_seksjon, innsendelsenr)) %>%
  dplyr::distinct() %>%
  tidyr::pivot_wider(id_cols = c(saksnr, konkl_kjennelsekode, konkl_analyttkode),
                     names_from = provenr,
                     values_from = provenr,
                     names_prefix = "P") %>%
  dplyr::rowwise() %>%
  dplyr::mutate(provenr = toString(c_across(starts_with("P")))) %>%
  dplyr::mutate(provenr = gsub("NA, ", "", provenr)) %>%
  dplyr::mutate(provenr = trimws(provenr, "b", "[ ,NA]")) %>%
  dplyr::select(saksnr, provenr, konkl_kjennelsekode, konkl_analyttkode) %>%
  NVIdb::add_PJS_code_description(PJS_variable_type = c("kjennelse", "analytt"),
                                  code_colname = c("konkl_kjennelsekode", "konkl_analyttkode"),
                                  new_column = c("konkl_kjennelse", "konkl_analytt")) 

# Remove heading if no data to report
if (dim(ktr)[1] == 0) {
  heading <- ""
}
knitr::asis_output(heading) # placed here as kitr::asis_output cannot be within a for-loop or an if-clause

# Output ktr if any cases need to be checked
if (dim(ktr)[1] > 0) {
  colnames(ktr) <- NVIdb::standardize_columns(ktr, property = "collabels")
  
  knitr::kable(ktr) %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
}
```

```{r, echo = F}
# Prøver med mer enn én konklusjonskjennelse for identiske konklusjonsanalytter og der konklusjonskjennelsene er motstridende

heading <- paste("<br/> <br/>",
                 "<h4> Tabell 6. Prøver med mer enn én konklusjonskjennelse for identiske konklusjonsanalytter og der konklusjonskjennelsene er motstridende </h4>",
                 "<h5> En prøve kan ikke konkluderes med motstridende prøvekonklusjoner for samme prøveanalytt. Ber om at de prøvekonklusjonene som er feil, fjernes fra saken. </h5>")

# Identify cases that need to be checked
ktr <- PJSdata %>%
  dplyr::select(saksnr, aar, ansvarlig_seksjon, innsendelsenr, provenr, konkl_kjennelsekode, konkl_analyttkode) %>%
  dplyr::distinct() %>%
  dplyr::add_count(saksnr, provenr, konkl_analyttkode) %>%
  dplyr::filter(n > 1) %>%
  dplyr::arrange(aar, ansvarlig_seksjon, innsendelsenr, provenr) %>%
  dplyr::select(-c(aar, ansvarlig_seksjon, innsendelsenr, n)) %>%
  NVIdb::add_PJS_code_description(PJS_variable_type = c("kjennelse", "analytt"),
                                  code_colname = c("konkl_kjennelsekode", "konkl_analyttkode"),
                                  new_column = c("konkl_kjennelse", "konkl_analytt")) 

# Remove heading if no data to report
if (dim(ktr)[1] == 0) {
  heading <- ""
}
knitr::asis_output(heading) # placed here as kitr::asis_output cannot be within a for-loop or an if-clause

# Output ktr if any cases need to be checked
if (dim(ktr)[1] > 0) {
  colnames(ktr) <- NVIdb::standardize_columns(ktr, property = "collabels")
  
  knitr::kable(ktr) %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
}
```

```{r, echo = F}
# Saker med en prøvekonklusjon med påvist som konklusjonskjennelse som ikke er benyttet som resultatkjennelse på noen av undersøkelsene

heading <- paste("<br/> <br/>",
                 "<h4> Tabell 7. Saker med en prøvekonklusjon med påvist som konklusjonskjennelse som ikke er benyttet som resultatkjennelse på noen av undersøkelsene </h4>",
                 "<h5> Det forventes minst at minst ett resultat har påvist som resultatkjennelse når prøven er konkludert påvist. </h5>",
                 "<h5> Ber om at det sjekkes at prøvekonklusjonen er korrekt eller om resultatet mangler eller er feil. </h5>")

# Identify cases that need to be checked
resultater <- unique(paste(PJSdata$saksnr, PJSdata$provenr, PJSdata$res_kjennelsekode, PJSdata$res_analyttkode, sep = "-"))
ktr1 <- PJSdata %>%
  dplyr::select(saksnr, aar, ansvarlig_seksjon, innsendelsenr, fagansvarlig_person, provenr,
                konkl_kjennelsekode, konkl_analyttkode) %>%
  dplyr::filter(konkl_analyttkode != "missing" & konkl_kjennelsekode == "020209") %>%
  dplyr::distinct() %>%
  dplyr::mutate(index = paste(saksnr, provenr, konkl_kjennelsekode, konkl_analyttkode, sep = "-")) %>%
  dplyr::filter(!index %in% resultater) %>%
  dplyr::arrange(aar, ansvarlig_seksjon, innsendelsenr, provenr) %>%
  dplyr::select(-c(aar, ansvarlig_seksjon, innsendelsenr, index))  %>%
  NVIdb::add_PJS_code_description(PJS_variable_type = c("kjennelse", "analytt"),
                                  code_colname = c("konkl_kjennelsekode", "konkl_analyttkode"),
                                  new_column = c("konkl_kjennelse", "konkl_analytt")) 

resultater <- c(resultater,
                unique(paste(PJSdata$saksnr, PJSdata$provenr, PJSdata$res_kjennelsekode, substr(PJSdata$res_analyttkode, 1, length_analytt), sep = "-")))
ktr2 <- PJSdata %>%
  dplyr::select(saksnr, aar, ansvarlig_seksjon, innsendelsenr, fagansvarlig_person, provenr,
                konkl_kjennelsekode, konkl_analyttkode) %>%
  dplyr::filter(konkl_analyttkode != "missing" & konkl_kjennelsekode == "020103002") %>%
  dplyr::distinct() %>%
  dplyr::mutate(index = paste(saksnr, provenr, konkl_kjennelsekode, konkl_analyttkode, sep = "-")) %>%
  dplyr::filter(!index %in% resultater) %>%
  dplyr::arrange(aar, ansvarlig_seksjon, innsendelsenr, provenr) %>%
  dplyr::select(-c(aar, ansvarlig_seksjon, innsendelsenr, index))  %>%
  NVIdb::add_PJS_code_description(PJS_variable_type = c("kjennelse", "analytt"),
                                  code_colname = c("konkl_kjennelsekode", "konkl_analyttkode"),
                                  new_column = c("konkl_kjennelse", "konkl_analytt")) 

ktr3 <- PJSdata %>%
  dplyr::select(saksnr, aar, ansvarlig_seksjon, innsendelsenr, fagansvarlig_person, provenr,
                konkl_kjennelsekode, konkl_analyttkode) %>%
  dplyr::filter(konkl_analyttkode != "missing" & konkl_kjennelsekode == "020403") %>%
  dplyr::distinct() %>%
  dplyr::mutate(index = paste(saksnr, provenr, konkl_kjennelsekode, konkl_analyttkode, sep = "-")) %>%
  dplyr::filter(!index %in% resultater) %>%
  dplyr::arrange(aar, ansvarlig_seksjon, innsendelsenr, provenr) %>%
  dplyr::select(-c(aar, ansvarlig_seksjon, innsendelsenr, index))  %>%
  NVIdb::add_PJS_code_description(PJS_variable_type = c("kjennelse", "analytt"),
                                  code_colname = c("konkl_kjennelsekode", "konkl_analyttkode"),
                                  new_column = c("konkl_kjennelse", "konkl_analytt")) 

ktr <- rbind(ktr1, ktr2, ktr3)

# Remove heading if no data to report
if (dim(ktr)[1] == 0) {
  heading <- ""
}
knitr::asis_output(heading) # placed here as kitr::asis_output cannot be within a for-loop or an if-clause

# Output ktr if any cases need to be checked
if (dim(ktr)[1] > 0) {
  colnames(ktr) <- NVIdb::standardize_columns(ktr, property = "collabels")
  
  knitr::kable(ktr) %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
}
```

```{r, echo = F}
# Prøver med foreløpig konklusjon

heading <- paste("<br/> <br/>",
                 "<h4> Tabell 8. Prøver med foreløpig konklusjon </h4>",
                 "<h5> Ber om at det sjekkes om prøven er ferdig undersøkt, og at konklusjonstypen i så fall oppdateres </h5>")

# Identify cases that need to be checked
ktr <- PJSdata %>%
  dplyr::select(saksnr, aar, ansvarlig_seksjon, innsendelsenr, provenr, konkl_type, konkl_kjennelsekode, konkl_analyttkode) %>%
  dplyr::distinct() %>%
  dplyr::filter(konkl_type == 3) %>%
  dplyr::arrange(aar, ansvarlig_seksjon, innsendelsenr, provenr) %>%
  dplyr::select(-c(aar, ansvarlig_seksjon, innsendelsenr)) %>%
  NVIdb::add_PJS_code_description(PJS_variable_type = c("konkl_type", "kjennelse", "analytt"),
                                  code_colname = c("konkl_type", "konkl_kjennelsekode", "konkl_analyttkode"),
                                  new_column = c("type","konkl_kjennelse", "konkl_analytt")) 

# Remove heading if no data to report
if (dim(ktr)[1] == 0) {
  heading <- ""
}
knitr::asis_output(heading) # placed here as kitr::asis_output cannot be within a for-loop or an if-clause

# Output ktr if any cases need to be checked
if (dim(ktr)[1] > 0) {
  colnames(ktr) <- NVIdb::standardize_columns(ktr, property = "collabels")
  
  knitr::kable(ktr) %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
}
```
